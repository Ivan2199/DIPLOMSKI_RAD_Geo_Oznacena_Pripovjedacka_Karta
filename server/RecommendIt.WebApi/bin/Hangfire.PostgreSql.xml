<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hangfire.PostgreSql</name>
    </assembly>
    <members>
        <member name="T:Hangfire.PostgreSql.Factories.ExistingNpgsqlConnectionFactory">
            <summary>
            Connection factory that utilizes an already-existing <see cref="T:Npgsql.NpgsqlConnection"/>.
            </summary>
        </member>
        <member name="M:Hangfire.PostgreSql.Factories.ExistingNpgsqlConnectionFactory.#ctor(Npgsql.NpgsqlConnection,Hangfire.PostgreSql.PostgreSqlStorageOptions)">
            <summary>
            Instantiates the factory using specified <paramref name="connection"/>.
            </summary>
            <param name="connection"><see cref="T:Npgsql.NpgsqlConnection"/> to use.</param>
            <param name="options"><see cref="T:Hangfire.PostgreSql.PostgreSqlStorageOptions"/> used for connection string verification.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Hangfire.PostgreSql.Factories.ExistingNpgsqlConnectionFactory.GetOrCreateConnection">
            <inheritdoc />
        </member>
        <member name="T:Hangfire.PostgreSql.Factories.NpgsqlConnectionFactory">
            <summary>
            Connection factory that creates a new <see cref="T:Npgsql.NpgsqlConnection"/> based on the connection string.
            </summary>
        </member>
        <member name="M:Hangfire.PostgreSql.Factories.NpgsqlConnectionFactory.#ctor(System.String,Hangfire.PostgreSql.PostgreSqlStorageOptions,System.Action{Npgsql.NpgsqlConnection})">
            <summary>
            Instantiates the factory using specified <paramref name="connectionString"/>.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="options"><see cref="T:Hangfire.PostgreSql.PostgreSqlStorageOptions"/> used for connection string verification.</param>
            <param name="connectionSetup">Optional additional connection setup action to be performed on the created <see cref="T:Npgsql.NpgsqlConnection"/>.</param>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="connectionString"/> is null.</exception>
        </member>
        <member name="M:Hangfire.PostgreSql.Factories.NpgsqlConnectionFactory.GetOrCreateConnection">
            <inheritdoc />
        </member>
        <member name="P:Hangfire.PostgreSql.Factories.NpgsqlInstanceConnectionFactoryBase.ConnectionString">
            <summary>
            Gets the connection string builder associated with the current instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">Throws if connection string builder has not been initialized.</exception>
        </member>
        <member name="M:Hangfire.PostgreSql.Factories.NpgsqlInstanceConnectionFactoryBase.GetOrCreateConnection">
            <inheritdoc />
        </member>
        <member name="T:Hangfire.PostgreSql.IConnectionFactory">
            <summary>
            Connection factory for creating <see cref="T:Npgsql.NpgsqlConnection"/> at runtime. 
            </summary>
        </member>
        <member name="M:Hangfire.PostgreSql.IConnectionFactory.GetOrCreateConnection">
            <summary>
            Get or create <see cref="T:Npgsql.NpgsqlConnection"/>.
            </summary>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperConfigurationExtensions.UsePostgreSqlStorage(Hangfire.IGlobalConfiguration,System.String)">
            <summary>
              Tells the bootstrapper to use PostgreSQL as a job storage,
              that can be accessed using the given connection string or
              its name.
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperConfigurationExtensions.UsePostgreSqlStorage(Hangfire.IGlobalConfiguration,System.String,Hangfire.PostgreSql.PostgreSqlStorageOptions)">
            <summary>
              Tells the bootstrapper to use PostgreSQL as a job storage
              with the given options, that can be accessed using the specified
              connection string.
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionString">Connection string</param>
            <param name="options">Advanced options</param>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperConfigurationExtensions.UsePostgreSqlStorage(Hangfire.IGlobalConfiguration,System.String,System.Action{Npgsql.NpgsqlConnection},Hangfire.PostgreSql.PostgreSqlStorageOptions)">
            <summary>
              Tells the bootstrapper to use PostgreSQL as a job storage
              with the given options, that can be accessed using the specified
              connection string.
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionString">Connection string</param>
            <param name="connectionSetup">Optional setup action to apply to created connections</param>
            <param name="options">Advanced options</param>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperConfigurationExtensions.UsePostgreSqlStorage(Hangfire.IGlobalConfiguration,Hangfire.PostgreSql.IConnectionFactory,Hangfire.PostgreSql.PostgreSqlStorageOptions)">
            <summary>
              Tells the bootstrapper to use PostgreSQL as a job storage
              with the given options, that can be accessed using the specified
              connection factory.
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionFactory">Connection factory</param>
            <param name="options">Advanced options</param>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperConfigurationExtensions.UsePostgreSqlStorage(Hangfire.IGlobalConfiguration,Hangfire.PostgreSql.IConnectionFactory)">
            <summary>
              Tells the bootstrapper to use PostgreSQL as a job storage
              with the given options, that can be accessed using the specified
              connection factory.
            </summary>
            <param name="configuration">Configuration</param>
            <param name="connectionFactory">Connection factory</param>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperConfigurationExtensions.UsePostgreSqlStorage(Hangfire.IGlobalConfiguration,System.Action{Hangfire.PostgreSql.PostgreSqlBootstrapperOptions})">
            <summary>
            Tells the bootstrapper to use PostgreSQL as the job storage with the default storage options.
            </summary>
            <param name="configuration">Configuration instance.</param>
            <param name="configure">Bootstrapper configuration action.</param>
            <returns><see cref="T:Hangfire.IGlobalConfiguration`1"/> instance whose generic type argument is <see cref="T:Hangfire.PostgreSql.PostgreSqlStorage"/>.</returns>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperConfigurationExtensions.UsePostgreSqlStorage(Hangfire.IGlobalConfiguration,System.Action{Hangfire.PostgreSql.PostgreSqlBootstrapperOptions},Hangfire.PostgreSql.PostgreSqlStorageOptions)">
            <summary>
            Tells the bootstrapper to use PostgreSQL as the job storage with the specified storage options.
            </summary>
            <param name="configuration">Configuration instance.</param>
            <param name="configure">Bootstrapper configuration action.</param>
            <param name="options">Storage options.</param>
            <returns><see cref="T:Hangfire.IGlobalConfiguration`1"/> instance whose generic type argument is <see cref="T:Hangfire.PostgreSql.PostgreSqlStorage"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if <see cref="T:Hangfire.PostgreSql.IConnectionFactory"/> is not set up in the <paramref name="configure"/> action.</exception>
        </member>
        <member name="T:Hangfire.PostgreSql.PostgreSqlBootstrapperOptions">
            <summary>
            Bootstrapper options.
            </summary>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperOptions.UseConnectionFactory(Hangfire.PostgreSql.IConnectionFactory)">
            <summary>
            Configures the bootstrapper to use a custom <see cref="T:Hangfire.PostgreSql.IConnectionFactory"/> to use for each database action.
            </summary>
            <param name="connectionFactory">Instance of <see cref="T:Hangfire.PostgreSql.IConnectionFactory"/>.</param>
            <returns>This instance.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="connectionFactory"/> is null.</exception>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperOptions.UseNpgsqlConnection(System.String,System.Action{Npgsql.NpgsqlConnection})">
            <summary>
            Configures the bootstrapper to create a new <see cref="T:Npgsql.NpgsqlConnection"/> for each database action.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="connectionSetup">Optional additional connection setup action to be performed on the created <see cref="T:Npgsql.NpgsqlConnection"/>.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlBootstrapperOptions.UseExistingNpgsqlConnection(Npgsql.NpgsqlConnection)">
            <summary>
            Configures the bootstrapper to use the existing <see cref="T:Npgsql.NpgsqlConnection"/> for each database action.
            </summary>
            <param name="connection"><see cref="T:Npgsql.NpgsqlConnection"/> to use.</param>
            <returns>This instance.</returns>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlJobQueue.FetchNextJob">
            <summary>
              Signal the waiting Thread to lookup a new Job
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.PostgreSqlMonitoringApi.SafeDictionary`2">
            <summary>
              Overloaded dictionary that doesn't throw if given an invalid key
              Fixes issues such as https://github.com/frankhommers/Hangfire.PostgreSql/issues/79
            </summary>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlStorage.#ctor(System.String,System.Action{Npgsql.NpgsqlConnection},Hangfire.PostgreSql.PostgreSqlStorageOptions)">
            <summary>
              Initializes PostgreSqlStorage from the provided PostgreSqlStorageOptions and either the provided connection string.
            </summary>
            <param name="connectionString">PostgreSQL connection string</param>
            <param name="connectionSetup">Optional setup action to apply to created connections</param>
            <param name="options">Storage options</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="connectionString" /> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="options" /> argument is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="connectionString" /> argument not a valid PostgreSQL connection string config file.</exception>
        </member>
        <member name="M:Hangfire.PostgreSql.PostgreSqlStorage.#ctor(Npgsql.NpgsqlConnection,Hangfire.PostgreSql.PostgreSqlStorageOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Hangfire.PostgreSql.PostgreSqlStorage" /> class with
              explicit instance of the <see cref="T:Npgsql.NpgsqlConnection" /> class that will be used
              to query the data.
            </summary>
            <param name="existingConnection">Existing connection</param>
            <param name="options">PostgreSqlStorageOptions</param>
        </member>
        <member name="P:Hangfire.PostgreSql.PostgreSqlStorageOptions.DeleteExpiredBatchSize">
            <summary>
              Gets or sets the number of records deleted in a single batch in expiration manager
            </summary>
        </member>
        <member name="P:Hangfire.PostgreSql.PostgreSqlStorageOptions.UseSlidingInvisibilityTimeout">
            <summary>
              Apply a sliding invisibility timeout where the last fetched time is continually updated in the background.
              This allows a lower invisibility timeout to be used with longer running jobs
              IMPORTANT: If <see cref="P:Hangfire.BackgroundJobServerOptions.IsLightweightServer" /> option is used, then sliding invisiblity timeouts will not work
              since the background storage processes are not run (which is used to update the invisibility timeouts)
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.CanBeNullAttribute">
            <summary>
              Indicates that the value of the marked element could be <c>null</c> sometimes,
              so the check for <c>null</c> is necessary before its usage
            </summary>
            <example>
              <code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.NotNullAttribute">
            <summary>
              Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
              <code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.StringFormatMethodAttribute">
            <summary>
              Indicates that the marked method builds string by format pattern and (optional) arguments.
              Parameter, which contains format string, should be given in constructor. The format string
              should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form
            </summary>
            <example>
              <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:Hangfire.PostgreSql.Properties.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
              Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.InvokerParameterNameAttribute">
            <summary>
              Indicates that the function argument should be string literal and match one
              of the parameters of the caller function. For example, ReSharper annotates
              the parameter of <see cref="T:System.ArgumentNullException" />
            </summary>
            <example>
              <code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.NotifyPropertyChangedInvocatorAttribute">
            <summary>
              Indicates that the method is contained in a type that implements
              <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface
              and this method is used to notify that some property value changed
            </summary>
            <remarks>
              The method should be non-static and conform to one of the supported signatures:
              <list>
                <item>
                  <c>NotifyChanged(string)</c>
                </item>
                <item>
                  <c>NotifyChanged(params string[])</c>
                </item>
                <item>
                  <c>NotifyChanged{T}(Expression{Func{T}})</c>
                </item>
                <item>
                  <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                </item>
                <item>
                  <c>SetProperty{T}(ref T, T, string)</c>
                </item>
              </list>
            </remarks>
            <example>
              <code>
            public class Foo : INotifyPropertyChanged {
              public event PropertyChangedEventHandler PropertyChanged;
              [NotifyPropertyChangedInvocator]
              protected virtual void NotifyChanged(string propertyName) { ... }
            
              private string _name;
              public string Name {
                get { return _name; }
                set { _name = value; NotifyChanged("LastName"); /* Warning */ }
              }
            }
            </code>
              Examples of generated notifications:
              <list>
                <item>
                  <c>NotifyChanged("Property")</c>
                </item>
                <item>
                  <c>NotifyChanged(() =&gt; Property)</c>
                </item>
                <item>
                  <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                </item>
                <item>
                  <c>SetProperty(ref myField, value, "Property")</c>
                </item>
              </list>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.ContractAnnotationAttribute">
            <summary>
              Describes dependency between method input and output
            </summary>
            <syntax>
              <p>Function Definition Table syntax:</p>
              <list>
                <item>FDT      ::= FDTRow [;FDTRow]*</item>
                <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                <item>Input    ::= ParameterName: Value [, Input]*</item>
                <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                <item>Value    ::= true | false | null | notnull | canbenull</item>
              </list>
              If method has single input parameter, it's name could be omitted.<br />
              Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
              for method output means that the methos doesn't return normally.<br />
              <c>canbenull</c> annotation is only applicable for output parameters.<br />
              You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
              or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples>
              <list>
                <item>
                  <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                </item>
                <item>
                  <code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code>
                </item>
                <item>
                  <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
                </item>
              </list>
            </examples>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.LocalizationRequiredAttribute">
            <summary>
              Indicates that marked element should be localized or not
            </summary>
            <example>
              <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.CannotApplyEqualityOperatorAttribute">
            <summary>
              Indicates that the value of the marked type (or its derivatives)
              cannot be compared using '==' or '!=' operators and <c>Equals()</c>
              should be used instead. However, using '==' or '!=' for comparison
              with <c>null</c> is always permitted.
            </summary>
            <example>
              <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.BaseTypeRequiredAttribute">
            <summary>
              When applied to a target attribute, specifies a requirement for any type marked
              with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
              <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.UsedImplicitlyAttribute">
            <summary>
              Indicates that the marked symbol is used implicitly
              (e.g. via reflection, in external library), so this symbol
              will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.MeansImplicitUseAttribute">
            <summary>
              Should be used on attributes and causes ReSharper
              to not mark symbols marked with such attributes as unused
              (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Hangfire.PostgreSql.Properties.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Hangfire.PostgreSql.Properties.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Hangfire.PostgreSql.Properties.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
              Indicates implicit instantiation of a type with fixed constructor signature.
              That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Hangfire.PostgreSql.Properties.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.ImplicitUseTargetFlags">
            <summary>
              Specify what is considered used implicitly
              when marked with <see cref="T:Hangfire.PostgreSql.Properties.MeansImplicitUseAttribute" />
              or <see cref="T:Hangfire.PostgreSql.Properties.UsedImplicitlyAttribute" />
            </summary>
        </member>
        <member name="F:Hangfire.PostgreSql.Properties.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Hangfire.PostgreSql.Properties.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.PublicAPIAttribute">
            <summary>
              This attribute is intended to mark publicly available API
              which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.InstantHandleAttribute">
            <summary>
              Tells code analysis engine if the parameter is completely handled
              when the invoked method is on stack. If the parameter is a delegate,
              indicates that delegate is executed while the method is executed.
              If the parameter is an enumerable, indicates that it is enumerated
              while the method is executed
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.PureAttribute">
            <summary>
              Indicates that a method does not make any observable state changes.
              The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example>
              <code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.PathReferenceAttribute">
            <summary>
              Indicates that a parameter is a path to a file or a folder
              within a web project. Path can be relative or absolute,
              starting from web root (~)
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcActionAttribute">
            <summary>
              ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
              is an MVC action. If applied to a method, the MVC action name is calculated
              implicitly from the context. Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcAreaAttribute">
            <summary>
              ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
              Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcControllerAttribute">
            <summary>
              ASP.NET MVC attribute. If applied to a parameter, indicates that
              the parameter is an MVC controller. If applied to a method,
              the MVC controller name is calculated implicitly from the context.
              Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcMasterAttribute">
            <summary>
              ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
              Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcModelTypeAttribute">
            <summary>
              ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
              Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcPartialViewAttribute">
            <summary>
              ASP.NET MVC attribute. If applied to a parameter, indicates that
              the parameter is an MVC partial view. If applied to a method,
              the MVC partial view name is calculated implicitly from the context.
              Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcSupressViewErrorAttribute">
            <summary>
              ASP.NET MVC attribute. Allows disabling all inspections
              for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcDisplayTemplateAttribute">
            <summary>
              ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
              Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcEditorTemplateAttribute">
            <summary>
              ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
              Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcTemplateAttribute">
            <summary>
              ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
              Use this attribute for custom wrappers similar to
              <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcViewAttribute">
            <summary>
              ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
              is an MVC view. If applied to a method, the MVC view name is calculated implicitly
              from the context. Use this attribute for custom wrappers similar to
              <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.AspMvcActionSelectorAttribute">
            <summary>
              ASP.NET MVC attribute. When applied to a parameter of an attribute,
              indicates that this parameter is an MVC action name
            </summary>
            <example>
              <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:Hangfire.PostgreSql.Properties.RazorSectionAttribute">
            <summary>
              Razor attribute. Indicates that a parameter or a method is a Razor section.
              Use this attribute for custom wrappers similar to
              <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Hangfire.PostgreSql.Utils.AutoResetEventRegistry">
            <summary>
            Represents a registry for managing AutoResetEvent instances using event keys.
            </summary>
        </member>
        <member name="M:Hangfire.PostgreSql.Utils.AutoResetEventRegistry.GetWaitHandles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves the wait handles associated with the specified event keys.
            </summary>
            <param name="eventKeys">The event keys.</param>
            <returns>An enumerable of wait handles.</returns>
        </member>
        <member name="M:Hangfire.PostgreSql.Utils.AutoResetEventRegistry.Set(System.String)">
            <summary>
            Sets the specified event.
            </summary>
            <param name="eventKey">The event key.</param>
        </member>
    </members>
</doc>
